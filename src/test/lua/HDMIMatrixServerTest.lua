dofile("Bootstrap.lua")
dofile("TestingBootstrap.lua")
dofile("HDMIMatrixServer.lua")

test("HDMI Matrix API Server", function()
  local conn = MockConnection:new()
  local UART_DEFAULT = 0

  test("Toggles power in different ways", function()
    uart.written[UART_DEFAULT] = {}
    net.server:connect(conn)
    conn:receive("GET /api/power HTTP/1.1")
    assertEquals(4, #uart.written[UART_DEFAULT])
    assertEquals(0x10, uart.written[UART_DEFAULT][1])
    assertEquals(0xef, uart.written[UART_DEFAULT][2])
    assertEquals(0xd5, uart.written[UART_DEFAULT][3])
    assertEquals(0x7b, uart.written[UART_DEFAULT][4])

    uart.written[UART_DEFAULT] = {}
    net.server:connect(conn)
    conn:receive("GET /api/power/1 HTTP/1.1")
    assertEquals(4, #uart.written[UART_DEFAULT])
    assertEquals(0x10, uart.written[UART_DEFAULT][1])
    assertEquals(0xef, uart.written[UART_DEFAULT][2])
    assertEquals(0xd5, uart.written[UART_DEFAULT][3])
    assertEquals(0x7b, uart.written[UART_DEFAULT][4])

    uart.written[UART_DEFAULT] = {}
    net.server:connect(conn)
    conn:receive("GET /api/power:toggle HTTP/1.1")
    assertEquals(4, #uart.written[UART_DEFAULT])
    assertEquals(0x10, uart.written[UART_DEFAULT][1])
    assertEquals(0xef, uart.written[UART_DEFAULT][2])
    assertEquals(0xd5, uart.written[UART_DEFAULT][3])
    assertEquals(0x7b, uart.written[UART_DEFAULT][4])
  end)

  test("Power create, update and delete are not allowed", function()
    net.server:connect(conn)
    conn:receive("PUT /api/power HTTP/1.1")
    conn:receive("{\"entity\": {\"name\": \"Big Power\"}}")
    assertEquals("HTTP/1.1 405 Method Not Allowed\n", conn.messages[1])

    net.server:connect(conn)
    conn:receive("PATCH /api/power HTTP/1.1")
    conn:receive("{\"entity\": {\"name\": \"Big Power\"}, \"updateMask\": [\"name\"]}")
    assertEquals("HTTP/1.1 405 Method Not Allowed\n", conn.messages[1])

    net.server:connect(conn)
    conn:receive("DELETE /api/power HTTP/1.1")
    assertEquals("HTTP/1.1 405 Method Not Allowed\n", conn.messages[1])
  end)

  test("Creates Inputs and Outputs", function()
    net.server:connect(conn)
    conn:receive("PUT /api/inputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 1, \"name\": \"DIRECTV\", \"image\": \"directv-app-logo.png\"}}")
    local input = sjson.decode(conn.messages[2])
    assertEquals(1, input.id)
    assertEquals("DIRECTV", input.name)
    assertEquals("directv-app-logo.png", input.image)

    net.server:connect(conn)
    conn:receive("PUT /api/inputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 3, \"name\": \"PS3\", \"image\": \"ps3.jpg\"}}")
    input = sjson.decode(conn.messages[2])
    assertEquals(3, input.id)
    assertEquals("PS3", input.name)
    assertEquals("ps3.jpg", input.image)

    net.server:connect(conn)
    conn:receive("PUT /api/outputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 1, \"name\": \"Front Left\", \"image\": \"tv1.png\"}}")
    local output = sjson.decode(conn.messages[2])
    assertEquals(1, output.id)
    assertEquals("Front Left", output.name)
    assertEquals("tv1.png", output.image)

    net.server:connect(conn)
    conn:receive("PUT /api/outputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 2, \"name\": \"Front Right\", \"image\": \"tv1.png\"}}")
    output = sjson.decode(conn.messages[2])
    assertEquals(2, output.id)
    assertEquals("Front Right", output.name)
    assertEquals("tv1.png", output.image)

    net.server:connect(conn)
    conn:receive("PUT /api/inputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 4, \"name\": \"PS4\", \"image\": \"ps4-logo.jpg\"}}")
    input = sjson.decode(conn.messages[2])
    assertEquals(4, input.id)
    assertEquals("PS4", input.name)
    assertEquals("ps4-logo.jpg", input.image)

    net.server:connect(conn)
    conn:receive("PUT /api/outputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 3, \"name\": \"Projector\", \"image\": \"projector.png\"}}")
    output = sjson.decode(conn.messages[2])
    assertEquals(3, output.id)
    assertEquals("Projector", output.name)
    assertEquals("projector.png", output.image)

    net.server:connect(conn)
    conn:receive("PUT /api/inputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 2, \"name\": \"Wii-U\", \"image\": \"wii-u-logo.png\"}}")
    input = sjson.decode(conn.messages[2])
    assertEquals(2, input.id)
    assertEquals("Wii-U", input.name)
    assertEquals("wii-u-logo.png", input.image)

    net.server:connect(conn)
    conn:receive("PUT /api/outputs HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 4, \"name\": \"Wireless HDMI\", \"image\": \"wireless_hdmi.gif\"}}")
    output = sjson.decode(conn.messages[2])
    assertEquals(4, output.id)
    assertEquals("Wireless HDMI", output.name)
    assertEquals("wireless_hdmi.gif", output.image)
  end)

  test("Gets inputs and outputs", function()
    net.server:connect(conn)
    conn:receive("GET /api/inputs/4 HTTP/1.1")
    local input = sjson.decode(conn.messages[2])
    assertEquals(4, input.id)
    assertEquals("PS4", input.name)
    assertEquals("ps4-logo.jpg", input.image)

    net.server:connect(conn)
    conn:receive("GET /api/outputs/3 HTTP/1.1")
    local output = sjson.decode(conn.messages[2])
    assertEquals(3, output.id)
    assertEquals("Projector", output.name)
    assertEquals("projector.png", output.image)

    net.server:connect(conn)
    conn:receive("GET /api/inputs/1 HTTP/1.1")
    input = sjson.decode(conn.messages[2])
    assertEquals(1, input.id)
    assertEquals("DIRECTV", input.name)
    assertEquals("directv-app-logo.png", input.image)
  end)

  test("Lists inputs and outputs", function()
    net.server:connect(conn)
    conn:receive("GET /api/inputs HTTP/1.1")
    local listResponse = sjson.decode(conn.messages[2])
    assertEquals(4, #listResponse.result)
    assertEquals(4, listResponse.totalSize)

    net.server:connect(conn)
    conn:receive("GET /api/outputs HTTP/1.1")
    listResponse = sjson.decode(conn.messages[2])
    assertEquals(4, #listResponse.result)
    assertEquals(4, listResponse.totalSize)
  end)

  test("Updates inputs and outputs", function()
    uart.written[UART_DEFAULT] = {}
    net.server:connect(conn)
    conn:receive("PATCH /api/inputs/2 HTTP/1.1")
    conn:receive("{\"entity\": {\"name\": \"DD4 Gamer\", \"image\": \"rpi.png\"}, \"updateMask\": [\"name\", \"image\"]}")
    local input = sjson.decode(conn.messages[2])
    assertEquals(2, input.id)
    assertEquals("DD4 Gamer", input.name)
    assertEquals("rpi.png", input.image)
    assertEquals(0, #uart.written[UART_DEFAULT]) -- Should not cause a write to uart.

    net.server:connect(conn)
    conn:receive("PATCH /api/outputs/4 HTTP/1.1")
    conn:receive("{\"entity\": {\"name\": \"TV Cart\", \"image\": \"cartTV.png\"}, \"updateMask\": [\"name\", \"image\"]}")
    local output = sjson.decode(conn.messages[2])
    assertEquals(4, output.id)
    assertEquals("TV Cart", output.name)
    assertEquals("cartTV.png", output.image)
    assertEquals(0, #uart.written[UART_DEFAULT]) -- Should not cause a write to uart.

    net.server:connect(conn)
    conn:receive("PATCH /api/outputs/4 HTTP/1.1")
    conn:receive("{\"entity\": {\"selected\": 1}, \"updateMask\": [\"selected\"]}")
    output = sjson.decode(conn.messages[2])
    assertEquals(4, output.id)
    assertEquals("TV Cart", output.name)
    assertEquals("cartTV.png", output.image)
    assertEquals(1, output.selected)
    assertEquals(4, #uart.written[UART_DEFAULT])
    assertEquals(0x0C, uart.written[UART_DEFAULT][1])
    assertEquals(0xf3, uart.written[UART_DEFAULT][2])
    assertEquals(0xd5, uart.written[UART_DEFAULT][3])
    assertEquals(0x7b, uart.written[UART_DEFAULT][4])
  end)

  test("Can Delete inputs and outputs", function()
    net.server:connect(conn)
    conn:receive("DELETE /api/inputs/2 HTTP/1.1")
    net.server:connect(conn)
    conn:receive("GET /api/inputs HTTP/1.1")
    local listResponse = sjson.decode(conn.messages[2])
    assertEquals(3, #listResponse.result)
    assertEquals(3, listResponse.totalSize)
    net.server:connect(conn)
    conn:receive("GET /api/outputs HTTP/1.1")
    listResponse = sjson.decode(conn.messages[2])
    assertEquals(4, #listResponse.result)
    assertEquals(4, listResponse.totalSize)

    net.server:connect(conn)
    conn:receive("DELETE /api/outputs/4 HTTP/1.1")
    net.server:connect(conn)
    conn:receive("GET /api/outputs HTTP/1.1")
    listResponse = sjson.decode(conn.messages[2])
    assertEquals(3, #listResponse.result)
    assertEquals(3, listResponse.totalSize)
    net.server:connect(conn)
    conn:receive("GET /api/inputs HTTP/1.1")
    listResponse = sjson.decode(conn.messages[2])
    assertEquals(3, #listResponse.result)
    assertEquals(3, listResponse.totalSize)
  end)
end)
